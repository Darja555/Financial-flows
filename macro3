Sub UpdateJobDescriptionDocuments()
    ' This macro will:
    ' 1. Open each old document
    ' 2. Extract key information
    ' 3. Create a new document based on the template
    ' 4. Fill in the template with extracted information
    ' 5. Save the new document

    Dim oldDoc As Document
    Dim newDoc As Document
    Dim oldFolder As String
    Dim newFolder As String
    Dim templatePath As String
    Dim fileName As String
    Dim fso As Object
    Dim folder As Object
    Dim file As Object
    Dim response As Integer
    Dim logFile As String
    Dim skippedFiles As Integer
    Dim processedFiles As Integer
    Dim errorFiles As Integer
    
    ' Define paths
    oldFolder = "Enter the full path to the folder containing old job descriptions:", "Source Folder"
    newFolder = "Enter the full path to the folder where updated job descriptions should be saved:", "Destination Folder"
    templatePath = "Enter the full path to your job description template:", "Template Path"
  
    
    ' Add trailing backslash if missing
    If Right(oldFolder, 1) <> "\" Then oldFolder = oldFolder & "\"
    If Right(newFolder, 1) <> "\" Then newFolder = newFolder & "\"
    
    ' Setup logging
    logFile = newFolder & "JobDescriptionUpdate_Log_" & Format(Now(), "yyyymmdd_hhmmss") & ".txt"
    LogMessage logFile, "Job Description Update Process Started"
    LogMessage logFile, "Source folder: " & oldFolder
    LogMessage logFile, "Destination folder: " & newFolder
    LogMessage logFile, "Template: " & templatePath
    
    ' Check if folders exist
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    If Not fso.FolderExists(oldFolder) Then
        MsgBox "The source folder does not exist!", vbExclamation
        LogMessage logFile, "ERROR: Source folder does not exist"
        Exit Sub
    End If
    
    If Not fso.FolderExists(newFolder) Then
        response = MsgBox("The destination folder does not exist. Create it?", vbYesNo + vbQuestion)
        If response = vbYes Then
            fso.CreateFolder newFolder
            LogMessage logFile, "Created destination folder: " & newFolder
        Else
            LogMessage logFile, "User canceled - destination folder does not exist"
            Exit Sub
        End If
    End If
    
    If Not fso.FileExists(templatePath) Then
        MsgBox "The template file does not exist!", vbExclamation
        LogMessage logFile, "ERROR: Template file does not exist: " & templatePath
        Exit Sub
    End If
    
    ' Ask how many files to process
    response = MsgBox("Do you want to process all files in the folder?" & vbCrLf & _
                     "Click Yes to process all files, or No to process just one test file.", vbYesNo + vbQuestion)
    
    If response = vbYes Then
        LogMessage logFile, "Mode: Processing all files"
    Else
        LogMessage logFile, "Mode: Processing one test file only"
    End If
    
    Set folder = fso.GetFolder(oldFolder)
    
    ' Process files
    processedFiles = 0
    skippedFiles = 0
    errorFiles = 0
    
    For Each file In folder.Files
        ' Only process Word documents
        If LCase(fso.GetExtensionName(file.Path)) = "docx" Or LCase(fso.GetExtensionName(file.Path)) = "doc" Then
            processedFiles = processedFiles + 1
            
            ' If user chose to process just one file, only process the first one
            If response = vbNo And processedFiles > 1 Then
                LogMessage logFile, "Stopping after first file (test mode)"
                Exit For
            End If
            
            ' Show progress
            fileName = file.Name
            Application.StatusBar = "Processing " & processedFiles & ": " & fileName
            LogMessage logFile, "Processing file: " & fileName
            
            On Error Resume Next
            ' Open the old document
            Set oldDoc = Documents.Open(file.Path, ReadOnly:=True)
            
            If Err.Number <> 0 Then
                LogMessage logFile, "ERROR: Could not open file: " & fileName & " - " & Err.Description
                errorFiles = errorFiles + 1
                Err.Clear
            Else
                ' Create new document from template
                Set newDoc = Documents.Add(Template:=templatePath)
                
                If Err.Number <> 0 Then
                    LogMessage logFile, "ERROR: Could not create new document from template - " & Err.Description
                    errorFiles = errorFiles + 1
                    Err.Clear
                    If oldDoc.Windows.Count > 0 Then oldDoc.Close SaveChanges:=False
                Else
                    ' Extract and copy information
                    TransferJobDescription oldDoc, newDoc, logFile, fileName
                    
                    ' Save the new document
                    newDoc.SaveAs2 newFolder & "Updated_" & fileName, wdFormatDocumentDefault
                    
                    If Err.Number <> 0 Then
                        LogMessage logFile, "ERROR: Could not save new document - " & Err.Description
                        errorFiles = errorFiles + 1
                        Err.Clear
                    Else
                        LogMessage logFile, "Successfully saved: " & newFolder & "Updated_" & fileName
                    End If
                    
                    newDoc.Close SaveChanges:=False
                End If
                
                ' Close the old document
                oldDoc.Close SaveChanges:=False
            End If
            On Error GoTo 0
            
            ' If testing with just one file, show details
            If response = vbNo Then
                MsgBox "Test file processed. Updated document saved as:" & vbCrLf & _
                      newFolder & "Updated_" & fileName, vbInformation
            End If
        Else
            skippedFiles = skippedFiles + 1
            LogMessage logFile, "Skipped non-Word file: " & file.Name
        End If
    Next file
    
    Application.StatusBar = "Done! Processed " & processedFiles & " files."
    LogMessage logFile, "Job description update complete!"
    LogMessage logFile, "Processed: " & processedFiles & " files"
    LogMessage logFile, "Skipped: " & skippedFiles & " files"
    LogMessage logFile, "Errors: " & errorFiles & " files"
    
    MsgBox "Job description update complete!" & vbCrLf & _
           "Processed " & processedFiles & " files." & vbCrLf & _
           "Skipped " & skippedFiles & " files." & vbCrLf & _
           "Errors " & errorFiles & " files." & vbCrLf & _
           "Updated documents saved to:" & vbCrLf & newFolder & vbCrLf & _
           "See log file for details: " & vbCrLf & logFile, vbInformation
           
    ' Clean up
    Set fso = Nothing
    Set folder = Nothing
    Set file = Nothing
End Sub

Sub LogMessage(logFile As String, message As String)
    ' Write a message to the log file
    Dim fileNum As Integer
    fileNum = FreeFile
    
    On Error Resume Next
    Open logFile For Append As #fileNum
    Print #fileNum, Format(Now(), "yyyy-mm-dd hh:mm:ss") & " - " & message
    Close #fileNum
    On Error GoTo 0
End Sub

Sub TransferJobDescription(oldDoc As Document, newDoc As Document, logFile As String, fileName As String)
    ' Extracts information from old document and transfers it to the new template
    Dim jobTitle As String
    Dim geoScope As String
    Dim managerialLevel As String
    Dim directReportsTo As String
    Dim functionalReportsTo As String
    Dim numDirectReports As String
    Dim numFunctionalReports As String
    Dim budgetResponsibility As String
    Dim dateContent As String
    Dim preparedBy As String
    Dim approvedBy As String
    Dim jobCode As String
    Dim functionalObjectives As Range
    Dim mainTasks As Range
    Dim education As Range
    
    ' Log the extraction process
    LogMessage logFile, "Starting extraction for file: " & fileName
    
    ' Extract information from the old document
    jobTitle = CleanExtractedText(ExtractText(oldDoc, "Job title:", "Geographical"))
    LogMessage logFile, "Extracted Job Title: " & IIf(jobTitle = "", "(empty)", Left(jobTitle, 50))
    
    geoScope = CleanExtractedText(ExtractText(oldDoc, "Geographical Scope:", "Managerial Level:"))
    LogMessage logFile, "Extracted Geographical Scope: " & IIf(geoScope = "", "(empty)", Left(geoScope, 50))
    
    managerialLevel = CleanExtractedText(ExtractText(oldDoc, "Managerial Level:", "reports to:"))
    LogMessage logFile, "Extracted Managerial Level: " & IIf(managerialLevel = "", "(empty)", managerialLevel)
    
    directReportsTo = CleanExtractedText(ExtractText(oldDoc, "Directly reports to:", "Functionally reports to:"))
    LogMessage logFile, "Extracted Direct Reports To: " & IIf(directReportsTo = "", "(empty)", Left(directReportsTo, 50))
    
    functionalReportsTo = CleanExtractedText(ExtractText(oldDoc, "Functionally reports to:", "Number of direct reports"))
    LogMessage logFile, "Extracted Functional Reports To: " & IIf(functionalReportsTo = "", "(empty)", Left(functionalReportsTo, 50))
    
    numDirectReports = CleanExtractedText(ExtractText(oldDoc, "Number of direct reports", "Number of indirect"))
    LogMessage logFile, "Extracted Number of Direct Reports: " & IIf(numDirectReports = "", "(empty)", numDirectReports)
    
    numFunctionalReports = CleanExtractedText(ExtractText(oldDoc, "Number of indirect / functional reports", "Budget responsibility"))
    LogMessage logFile, "Extracted Number of Functional Reports: " & IIf(numFunctionalReports = "", "(empty)", numFunctionalReports)
    
    budgetResponsibility = CleanExtractedText(ExtractText(oldDoc, "Budget responsibility", "Functional objectives"))
    LogMessage logFile, "Extracted Budget Responsibility: " & IIf(budgetResponsibility = "", "(empty)", Left(budgetResponsibility, 50))
    
    ' Try different variations of date and job code fields
    dateContent = CleanExtractedText(ExtractText(oldDoc, "Date (Content)", "Prepared by:"))
    If dateContent = "" Then dateContent = CleanExtractedText(ExtractText(oldDoc, "Date", "Prepared by:"))
    LogMessage logFile, "Extracted Date: " & IIf(dateContent = "", "(empty)", dateContent)
    
    preparedBy = CleanExtractedText(ExtractText(oldDoc, "Prepared by:", "Approved by:"))
    LogMessage logFile, "Extracted Prepared By: " & IIf(preparedBy = "", "(empty)", Left(preparedBy, 50))
    
    approvedBy = CleanExtractedText(ExtractText(oldDoc, "Approved by:", "Job Code:"))
    If approvedBy = "" Then approvedBy = CleanExtractedText(ExtractText(oldDoc, "Approved by:", "[END]"))
    LogMessage logFile, "Extracted Approved By: " & IIf(approvedBy = "", "(empty)", Left(approvedBy, 50))
    
    jobCode = CleanExtractedText(ExtractText(oldDoc, "Job Code:", ""))
    LogMessage logFile, "Extracted Job Code: " & IIf(jobCode = "", "(empty)", jobCode)
    
    ' Extract sections
    Set functionalObjectives = ExtractSectionContent(oldDoc, "Functional objectives:", "Main Tasks:")
    Set mainTasks = ExtractSectionContent(oldDoc, "Main Tasks:", "Education and professional knowledge:")
    Set education = ExtractSectionContent(oldDoc, "Education and professional knowledge:", "[END]")
    
    ' Fill dropdown fields
    ' Job Function and Job Family are left blank as per requirements
    SetDropdown newDoc, "Job Function", "", logFile, fileName
    SetDropdown newDoc, "Job Family", "", logFile, fileName
    
    ' Map and set the Managerial Level
    Dim mappedLevel As String
    mappedLevel = MapManagerialLevel(managerialLevel)
    LogMessage logFile, "Mapped Managerial Level: '" & managerialLevel & "' to '" & mappedLevel & "'"
    SetDropdown newDoc, "Managerial Level", mappedLevel, logFile, fileName
    
    ' Fill text fields
    FillTextField newDoc, "Job Title", jobTitle, logFile, fileName
    
    ' Fill table cells
    FillTableCell newDoc, 1, "Fill in geographical scope", geoScope, logFile, fileName
    FillTableCell newDoc, 1, "Fill in supervisor", directReportsTo, logFile, fileName
    FillTableCell newDoc, 1, "Fill in functional supervisor", functionalReportsTo, logFile, fileName
    FillTableCell newDoc, 1, "Fill in number of direct", numDirectReports, logFile, fileName
    FillTableCell newDoc, 1, "Fill in number of functional", numFunctionalReports, logFile, fileName
    FillTableCell newDoc, 1, "Fill in budget responsibility", budgetResponsibility, logFile, fileName
    FillTableCell newDoc, 1, "Fill in date of Content", dateContent, logFile, fileName
    FillTableCell newDoc, 1, "Fill in creator of JD", preparedBy, logFile, fileName
    FillTableCell newDoc, 1, "Fill in approver of JD", approvedBy, logFile, fileName
    FillTableCell newDoc, 1, "Fill in Job Code", jobCode, logFile, fileName
    
    ' Add content sections with bullet points
    LogMessage logFile, "Adding Functional Objectives section..."
    AddSectionContent newDoc, "Functional objectives:", functionalObjectives, logFile, fileName
    
    LogMessage logFile, "Adding Main Tasks section..."
    AddSectionContent newDoc, "Main Tasks:", mainTasks, logFile, fileName
    
    LogMessage logFile, "Adding Education section..."
    AddSectionContent newDoc, "Education and professional knowledge:", education, logFile, fileName
    
    LogMessage logFile, "Transfer completed for file: " & fileName
End Sub

Function MapManagerialLevel(oldValue As String) As String
    ' Maps old managerial level values to one of the six standard options
    ' Returns one of: "VP", "Director", "Manager", "Leader", "Professional", "Support"
    
    If oldValue = "" Then
        MapManagerialLevel = "Select managerial level" ' Default if empty
        Exit Function
    End If
    
    oldValue = Trim(LCase(oldValue))
    
    ' Check for VP/Executive level
    If InStr(oldValue, "vp") > 0 Or _
       InStr(oldValue, "vice president") > 0 Or _
       InStr(oldValue, "vice-president") > 0 Or _
       InStr(oldValue, "executive") > 0 Or _
       InStr(oldValue, "chief") > 0 Or _
       InStr(oldValue, "c-level") > 0 Or _
       InStr(oldValue, "ceo") > 0 Or _
       InStr(oldValue, "cfo") > 0 Or _
       InStr(oldValue, "cio") > 0 Or _
       InStr(oldValue, "cto") > 0 Or _
       InStr(oldValue, "president") > 0 Then
        MapManagerialLevel = "VP"
        
    ' Check for Director level
    ElseIf InStr(oldValue, "director") > 0 Or _
           InStr(oldValue, "head of") > 0 Or _
           InStr(oldValue, "dept head") > 0 Or _
           InStr(oldValue, "department head") > 0 Then
        MapManagerialLevel = "Director"
        
    ' Check for Manager level
    ElseIf InStr(oldValue, "manager") > 0 Or _
           InStr(oldValue, "management") > 0 Or _
           InStr(oldValue, "managing") > 0 Then
        MapManagerialLevel = "Manager"
        
    ' Check for Leader level
    ElseIf InStr(oldValue, "lead") > 0 Or _
           InStr(oldValue, "supervisor") > 0 Or _
           InStr(oldValue, "team lead") > 0 Or _
           InStr(oldValue, "senior") > 0 And Not InStr(oldValue, "senior manager") > 0 Then
        MapManagerialLevel = "Leader"
        
    ' Check for Professional level
    ElseIf InStr(oldValue, "professional") > 0 Or _
           InStr(oldValue, "specialist") > 0 Or _
           InStr(oldValue, "analyst") > 0 Or _
           InStr(oldValue, "officer") > 0 Or _
           InStr(oldValue, "associate") > 0 Or _
           InStr(oldValue, "consultant") > 0 Or _
           InStr(oldValue, "engineer") > 0 Or _
           InStr(oldValue, "architect") > 0 Or _
           InStr(oldValue, "expert") > 0 Then
        MapManagerialLevel = "Professional"
        
    ' Check for Support level
    ElseIf InStr(oldValue, "support") > 0 Or _
           InStr(oldValue, "assistant") > 0 Or _
           InStr(oldValue, "clerk") > 0 Or _
           InStr(oldValue, "coordinator") > 0 Or _
           InStr(oldValue, "admin") > 0 Or _
           InStr(oldValue, "secretary") > 0 Or _
           InStr(oldValue, "receptionist") > 0 Then
        MapManagerialLevel = "Support"
        
    ' Default case if no match
    Else
        MapManagerialLevel = "Select managerial level"
    End If
End Function

Function CleanExtractedText(text As String) As String
    ' Cleans up extracted text
    Dim cleanText As String
    
    If text = "" Then
        CleanExtractedText = ""
        Exit Function
    End If
    
    cleanText = Trim(text)
    
    ' Remove multiple spaces
    Do While InStr(cleanText, "  ") > 0
        cleanText = Replace(cleanText, "  ", " ")
    Loop
    
    ' Remove various control characters
    cleanText = Replace(cleanText, Chr(13), "")
    cleanText = Replace(cleanText, Chr(10), "")
    cleanText = Replace(cleanText, Chr(7), "")
    cleanText = Replace(cleanText, Chr(11), "")
    cleanText = Replace(cleanText, Chr(12), "")
    cleanText = Replace(cleanText, Chr(0), "")
    cleanText = Replace(cleanText, vbTab, " ")
    
    ' Clean up again after replacements
    cleanText = Trim(cleanText)
    Do While InStr(cleanText, "  ") > 0
        cleanText = Replace(cleanText, "  ", " ")
    Loop
    
    CleanExtractedText = cleanText
End Function

Function ExtractText(doc As Document, startMarker As String, endMarker As String) As String
    ' Extracts text between two markers
    Dim startPos As Long
    Dim endPos As Long
    Dim searchRange As Range
    
    On Error Resume Next
    
    Set searchRange = doc.Content
    With searchRange.Find
        .ClearFormatting
        .Text = startMarker
        .Forward = True
        .MatchWholeWord = False
        .MatchCase = False
        .Execute
        
        If .Found Then
            startPos = .Parent.End
            
            If endMarker <> "" Then
                Set searchRange = doc.Range(Start:=startPos, End:=doc.Content.End)
                With searchRange.Find
                    .ClearFormatting
                    .Text = endMarker
                    .Forward = True
                    .MatchWholeWord = False
                    .MatchCase = False
                    .Execute
                    
                    If .Found Then
                        endPos = .Parent.Start
                    Else
                        ' If end marker not found, look for next paragraph
                        endPos = InStr(startPos, doc.Content.Text, vbCr)
                        If endPos = 0 Or endPos < startPos Then endPos = doc.Content.End
                    End If
                End With
            Else
                ' If no end marker provided, extract to next paragraph
                endPos = InStr(startPos, doc.Content.Text, vbCr)
                If endPos = 0 Or endPos < startPos Then endPos = doc.Content.End
            End If
            
            If endPos > startPos Then
                ExtractText = Trim(doc.Range(Start:=startPos, End:=endPos).Text)
            Else
                ExtractText = ""
            End If
        Else
            ExtractText = ""
        End If
    End With
    
    On Error GoTo 0
End Function

Function ExtractSectionContent(doc As Document, sectionHeader As String, nextSectionHeader As String) As Range
    ' Extracts a section including bullet points as a Range
    Dim startPos As Long
    Dim endPos As Long
    Dim sectionRange As Range
    
    On Error Resume Next
    
    With doc.Content.Find
        .ClearFormatting
        .Text = sectionHeader
        .Forward = True
        .MatchWholeWord = False
        .MatchCase = False
        .Execute
        
        If .Found Then
            startPos = .Parent.End
            
            With doc.Range(Start:=startPos, End:=doc.Content.End).Find
                .ClearFormatting
                .Text = nextSectionHeader
                .Forward = True
                .MatchWholeWord = False
                .MatchCase = False
                .Execute
                
                If .Found Then
                    endPos = .Parent.Start
                Else
                    ' If next section header not found, extract to end of document
                    endPos = doc.Content.End
                End If
            End With
            
            ' Create the range for the section content
            Set sectionRange = doc.Range(Start:=startPos, End:=endPos)
            Set ExtractSectionContent = sectionRange
        Else
            ' Return an empty range if section header not found
            Set ExtractSectionContent = doc.Range(0, 0)
        End If
    End With
    
    On Error GoTo 0
End Function

Sub SetDropdown(doc As Document, controlTag As String, value As String, logFile As String, fileName As String)
    ' Sets a dropdown content control
    Dim cc As ContentControl
    Dim foundControl As Boolean
    
    On Error Resume Next
    
    foundControl = False
    For Each cc In doc.ContentControls
        If (cc.Title = controlTag Or cc.Tag = controlTag) And _
            (cc.Type = wdContentControlComboBox Or cc.Type = wdContentControlDropdownList) Then
            
            foundControl = True
            If value <> "" And value <> "Select managerial level" Then
                cc.Range.Text = value
                
                If Err.Number <> 0 Then
                    LogMessage logFile, "ERROR: Failed to set dropdown '" & controlTag & "' to '" & value & "' in file: " & fileName & " - " & Err.Description
                    Err.Clear
                End If
            End If
            Exit For
        End If
    Next cc
    
    If Not foundControl Then
        LogMessage logFile, "WARNING: Dropdown content control '" & controlTag & "' not found in template for file: " & fileName
    End If
    
    On Error GoTo 0
End Sub

Sub FillTextField(doc As Document, fieldName As String, value As String, logFile As String, fileName As String)
    ' Fills a plain text content control
    Dim cc As ContentControl
    Dim foundControl As Boolean
    
    On Error Resume Next
    
    foundControl = False
    For Each cc In doc.ContentControls
        If (cc.Title = fieldName Or cc.Tag = fieldName) And cc.Type = wdContentControlText Then
            foundControl = True
            If value <> "" Then
                cc.Range.Text = value
                
                If Err.Number <> 0 Then
                    LogMessage logFile, "ERROR: Failed to set text field '" & fieldName & "' to '" & value & "' in file: " & fileName & " - " & Err.Description
                    Err.Clear
                End If
            End If
            Exit For
        End If
    Next cc
    
    If Not foundControl Then
        LogMessage logFile, "WARNING: Text content control '" & fieldName & "' not found in template for file: " & fileName
    End If
    
    On Error GoTo 0
End Sub

Sub FillTableCell(doc As Document, tableIndex As Integer, placeholderText As String, newValue As String, logFile As String, fileName As String)
    ' Fills a table cell with new value
    Dim tbl As Table
    Dim cell As Cell
    Dim foundCell As Boolean
    
    On Error Resume Next
    
    If doc.Tables.Count < tableIndex Then
        LogMessage logFile, "ERROR: Table " & tableIndex & " not found in template for file: " & fileName
        Exit Sub
    End If
    
    Set tbl = doc.Tables(tableIndex)
    foundCell = False
    
    For Each cell In tbl.Range.Cells
        If InStr(cell.Range.Text, placeholderText) > 0 Then
            foundCell = True
            
            If newValue <> "" Then
                ' Replace placeholder text with the actual value
                cell.Range.Text = Replace(cell.Range.Text, placeholderText, newValue)
                
                If Err.Number <> 0 Then
                    LogMessage logFile, "ERROR: Failed to set table cell '" & placeholderText & "' to '" & newValue & "' in file: " & fileName & " - " & Err.Description
                    Err.Clear
                End If
            End If
            
            Exit For
        End If
    Next cell
    
    If Not foundCell Then
        LogMessage logFile, "WARNING: Table cell with text '" & placeholderText & "' not found in table " & tableIndex & " for file: " & fileName
    End If
    
    On Error GoTo 0
End Sub

Sub AddSectionContent(doc As Document, sectionHeader As String, contentRange As Range, logFile As String, fileName As String)
    ' Adds content to a section after its header while preserving bullet points
    Dim rng As Range
    Dim para As Paragraph
    Dim newPara As Paragraph
    Dim foundHeader As Boolean
    
    On Error Resume Next
    
    ' If content range is empty, exit
    If contentRange.Start = 0 And contentRange.End = 0 Then
        LogMessage logFile, "WARNING: No content found for section '" & sectionHeader & "' in file: " & fileName
        Exit Sub
    End If
    
    ' Find the section header in the new document
    foundHeader = False
    With doc.Content.Find
        .ClearFormatting
        .Text = sectionHeader
        .Forward = True
        .MatchWholeWord = False
        .MatchCase = False
        .Execute
        
        If .Found Then
            foundHeader = True
            Set rng = .Parent
            rng.Collapse wdCollapseEnd
            
            ' Add spacing between header and content
            rng.InsertParagraphAfter
            rng.Collapse wdCollapseEnd
            
            ' Process each paragraph from the content range
            Dim totalParagraphs As Integer
            totalParagraphs = 0
            
            For Each para In contentRange.Paragraphs
                If Trim(para.Range.Text) <> "" Then
                    totalParagraphs = totalParagraphs + 1
                    
                    ' Add a new paragraph
                    Set newPara = doc.Paragraphs.Add(rng)
                    rng.Collapse wdCollapseEnd
                    
                    ' Copy text and formatting
                    newPara.Range.FormattedText = para.Range.FormattedText
                    
                    ' Apply bullet format if original had bullets
                    If para.Range.ListFormat.ListType = wdListBullet Then
                        newPara.Range.ListFormat.ApplyBulletDefault
                    End If
                    
                    ' Position for next paragraph
                    Set rng = newPara.Range
                    rng.Collapse wdCollapseEnd
                End If
            Next para
            
            LogMessage logFile, "Added " & totalParagraphs & " paragraphs to section '" & sectionHeader & "' in file: " & fileName
        Else
            LogMessage logFile, "WARNING: Section header '" & sectionHeader & "' not found in template for file: " & fileName
        End If
    End With
    
    If Err.Number <> 0 Then
        LogMessage logFile, "ERROR: Problem adding content to section '" & sectionHeader & "' in file: " & fileName & " - " & Err.Description
        Err.Clear
    End If
    
    On Error GoTo 0
End Sub
