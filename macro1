Sub UpdateJobDescriptionDocuments()
    ' This macro will:
    ' 1. Open each old document
    ' 2. Extract key information
    ' 3. Create a new document based on the template
    ' 4. Fill in the template with extracted information
    ' 5. Save the new document

    Dim oldDoc As Document
    Dim newDoc As Document
    Dim oldFolder As String
    Dim newFolder As String
    Dim templatePath As String
    Dim fileName As String
    Dim fso As Object
    Dim folder As Object
    Dim file As Object
    Dim response As Integer
    Dim logFile As String
    Dim skippedFiles As Integer
    Dim processedFiles As Integer
    Dim errorFiles As Integer
    
    ' Define paths
    oldFolder = InputBox("Enter the full path to the folder containing old job descriptions:" & vbCrLf & _
                         "Example: C:\OldJobDescriptions\", "Old Documents Folder")
    If oldFolder = "" Then Exit Sub
    
    newFolder = InputBox("Enter the full path to the folder where updated job descriptions should be saved:" & vbCrLf & _
                         "Example: C:\UpdatedJobDescriptions\", "New Documents Folder")
    If newFolder = "" Then Exit Sub
    
    templatePath = InputBox("Enter the full path to your job description template:" & vbCrLf & _
                           "Example: C:\Templates\JobDescriptionTemplate.docx", "Template Path")
    If templatePath = "" Then Exit Sub
    
    ' Add trailing backslash if missing
    If Right(oldFolder, 1) <> "\" Then oldFolder = oldFolder & "\"
    If Right(newFolder, 1) <> "\" Then newFolder = newFolder & "\"
    
    ' Setup logging
    logFile = newFolder & "JobDescriptionUpdate_Log_" & Format(Now(), "yyyymmdd_hhmmss") & ".txt"
    LogMessage logFile, "Job Description Update Process Started"
    LogMessage logFile, "Source folder: " & oldFolder
    LogMessage logFile, "Destination folder: " & newFolder
    LogMessage logFile, "Template: " & templatePath
    
    ' Check if folders exist
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    If Not fso.FolderExists(oldFolder) Then
        MsgBox "The source folder does not exist!", vbExclamation
        LogMessage logFile, "ERROR: Source folder does not exist"
        Exit Sub
    End If
    
    If Not fso.FolderExists(newFolder) Then
        response = MsgBox("The destination folder does not exist. Create it?", vbYesNo + vbQuestion)
        If response = vbYes Then
            fso.CreateFolder newFolder
            LogMessage logFile, "Created destination folder: " & newFolder
        Else
            LogMessage logFile, "User canceled - destination folder does not exist"
            Exit Sub
        End If
    End If
    
    If Not fso.FileExists(templatePath) Then
        MsgBox "The template file does not exist!", vbExclamation
        LogMessage logFile, "ERROR: Template file does not exist: " & templatePath
        Exit Sub
    End If
    
    ' Ask how many files to process
    response = MsgBox("Do you want to process all files in the folder?" & vbCrLf & _
                     "Click Yes to process all files, or No to process just one test file.", vbYesNo + vbQuestion)
    
    If response = vbYes Then
        LogMessage logFile, "Mode: Processing all files"
    Else
        LogMessage logFile, "Mode: Processing one test file only"
    End If
    
    Set folder = fso.GetFolder(oldFolder)
    
    ' Process files
    processedFiles = 0
    skippedFiles = 0
    errorFiles = 0
    
    For Each file In folder.Files
        ' Only process Word documents
        If LCase(fso.GetExtensionName(file.Path)) = "docx" Or LCase(fso.GetExtensionName(file.Path)) = "doc" Then
            processedFiles = processedFiles + 1
            
            ' If user chose to process just one file, only process the first one
            If response = vbNo And processedFiles > 1 Then
                LogMessage logFile, "Stopping after first file (test mode)"
                Exit For
            End If
            
            ' Show progress
            fileName = file.Name
            Application.StatusBar = "Processing " & processedFiles & ": " & fileName
            LogMessage logFile, "Processing file: " & fileName
            
            On Error Resume Next
            ' Open the old document
            Set oldDoc = Documents.Open(file.Path, ReadOnly:=True)
            
            If Err.Number <> 0 Then
                LogMessage logFile, "ERROR: Could not open file: " & fileName & " - " & Err.Description
                errorFiles = errorFiles + 1
                Err.Clear
            Else
                ' Create new document from template
                Set newDoc = Documents.Add(Template:=templatePath)
                
                If Err.Number <> 0 Then
                    LogMessage logFile, "ERROR: Could not create new document from template - " & Err.Description
                    errorFiles = errorFiles + 1
                    Err.Clear
                    If oldDoc.Windows.Count > 0 Then oldDoc.Close SaveChanges:=False
                Else
                    ' Extract and copy information
                    TransferJobDescription oldDoc, newDoc, logFile, fileName
                    
                    ' Save the new document
                    newDoc.SaveAs2 newFolder & "Updated_" & fileName, wdFormatDocumentDefault
                    
                    If Err.Number <> 0 Then
                        LogMessage logFile, "ERROR: Could not save new document - " & Err.Description
                        errorFiles = errorFiles + 1
                        Err.Clear
                    Else
                        LogMessage logFile, "Successfully saved: " & newFolder & "Updated_" & fileName
                    End If
                    
                    newDoc.Close SaveChanges:=False
                End If
                
                ' Close the old document
                oldDoc.Close SaveChanges:=False
            End If
            On Error GoTo 0
            
            ' If testing with just one file, show details
            If response = vbNo Then
                MsgBox "Test file processed. Updated document saved as:" & vbCrLf & _
                      newFolder & "Updated_" & fileName, vbInformation
            End If
        Else
            skippedFiles = skippedFiles + 1
            LogMessage logFile, "Skipped non-Word file: " & file.Name
        End If
    Next file
    
    Application.StatusBar = "Done! Processed " & processedFiles & " files."
    LogMessage logFile, "Job description update complete!"
    LogMessage logFile, "Processed: " & processedFiles & " files"
    LogMessage logFile, "Skipped: " & skippedFiles & " files"
    LogMessage logFile, "Errors: " & errorFiles & " files"
    
    MsgBox "Job description update complete!" & vbCrLf & _
           "Processed " & processedFiles & " files." & vbCrLf & _
           "Skipped " & skippedFiles & " files." & vbCrLf & _
           "Errors " & errorFiles & " files." & vbCrLf & _
           "Updated documents saved to:" & vbCrLf & newFolder & vbCrLf & _
           "See log file for details: " & vbCrLf & logFile, vbInformation
End Sub

Sub LogMessage(logFile As String, message As String)
    ' Write a message to the log file
    Dim fileNum As Integer
    fileNum = FreeFile
    
    Open logFile For Append As #fileNum
    Print #fileNum, Format(Now(), "yyyy-mm-dd hh:mm:ss") & " - " & message
    Close #fileNum
End Sub

Sub TransferJobDescription(oldDoc As Document, newDoc As Document, logFile As String, fileName As String)
    ' Extracts information from old document and transfers it to the new template
    Dim jobTitle As String
    Dim geoScope As String
    Dim managerialLevel As String
    Dim directReportsTo As String
    Dim functionalReportsTo As String
    Dim numDirectReports As String
    Dim numFunctionalReports As String
    Dim budgetResponsibility As String
    Dim dateContent As String
    Dim preparedBy As String
    Dim approvedBy As String
    Dim jobCode As String
    Dim functionalObjectives As String
    Dim mainTasks As String
    Dim education As String
    
    ' Extract information from the old document
    jobTitle = CleanExtractedText(ExtractText(oldDoc, "Job title:", "Geographical"))
    geoScope = CleanExtractedText(ExtractText(oldDoc, "Geographical Scope:", "Managerial Level:"))
    managerialLevel = CleanExtractedText(ExtractText(oldDoc, "Managerial Level:", "reports to:"))
    directReportsTo = CleanExtractedText(ExtractText(oldDoc, "Directly reports to:", "Functionally reports to:"))
    functionalReportsTo = CleanExtractedText(ExtractText(oldDoc, "Functionally reports to:", "Number of direct reports"))
    numDirectReports = CleanExtractedText(ExtractText(oldDoc, "Number of direct reports", "Number of indirect"))
    numFunctionalReports = CleanExtractedText(ExtractText(oldDoc, "Number of indirect / functional reports", "Budget responsibility"))
    budgetResponsibility = CleanExtractedText(ExtractText(oldDoc, "Budget responsibility", "Functional objectives"))
    jobCode = CleanExtractedText(ExtractText(oldDoc, "Job Code:", ""))
    dateContent = CleanExtractedText(ExtractText(oldDoc, "Date (Content)", "Prepared by:"))
    If dateContent = "" Then dateContent = CleanExtractedText(ExtractText(oldDoc, "Date", "Prepared by:"))
    preparedBy = CleanExtractedText(ExtractText(oldDoc, "Prepared by:", "Approved by:"))
    approvedBy = CleanExtractedText(ExtractText(oldDoc, "Approved by:", "Job Code:"))
    functionalObjectives = CleanExtractedText(ExtractSectionContent(oldDoc, "Functional objectives:", "Main Tasks:"))
    mainTasks = CleanExtractedText(ExtractSectionContent(oldDoc, "Main Tasks:", "Education and professional knowledge:"))
    education = CleanExtractedText(ExtractSectionContent(oldDoc, "Education and professional knowledge:", "[END]"))
    
    ' Fill dropdown fields
    SetDropdown newDoc, "Job Function", "", logFile, fileName ' Leave blank
    SetDropdown newDoc, "Job Family", "", logFile, fileName  ' Leave blank
    SetDropdown newDoc, "Managerial Level", managerialLevel, logFile, fileName
    
    ' Fill text fields
    FillTextField newDoc, "Job Title", jobTitle, logFile, fileName
    
    ' Fill table cells
    FillTableCell newDoc, 1, "Fill in geographical scope", geoScope, logFile, fileName
    FillTableCell newDoc, 1, "Fill in supervisor", directReportsTo, logFile, fileName
    FillTableCell newDoc, 1, "Fill in functional supervisor", functionalReportsTo, logFile, fileName
    FillTableCell newDoc, 1, "Fill in number of direct", numDirectReports, logFile, fileName
    FillTableCell newDoc, 1, "Fill in number of functional", numFunctionalReports, logFile, fileName
    FillTableCell newDoc, 1, "Fill in budget responsibility", budgetResponsibility, logFile, fileName
    FillTableCell newDoc, 1, "Fill in date of Content", dateContent, logFile, fileName
    FillTableCell newDoc, 1, "Fill in creator of JD", preparedBy, logFile, fileName
    FillTableCell newDoc, 1, "Fill in approver of JD", approvedBy, logFile, fileName
    FillTableCell newDoc, 1, "Fill in Job Code", jobCode, logFile, fileName
    
    ' Add content sections with bullet points
    AddSectionContent newDoc, "Functional objectives:", functionalObjectives, logFile, fileName
    AddSectionContent newDoc, "Main Tasks:", mainTasks, logFile, fileName
    AddSectionContent newDoc, "Education and professional knowledge:", education, logFile, fileName
End Sub

Function MapManagerialLevel(oldValue As String) As String
    ' Maps old managerial level values to one of the six standard options
    oldValue = Trim(LCase(oldValue))
    
    If InStr(oldValue, "vp") > 0 Or InStr(oldValue, "vice president") > 0 Or InStr(oldValue, "vice-president") > 0 Or _
       InStr(oldValue, "executive") > 0 Or InStr(oldValue, "chief") > 0 Or InStr(oldValue, "c-level") > 0 Then
        MapManagerialLevel = "VP"
    ElseIf InStr(oldValue, "director") > 0 Or InStr(oldValue, "head of") > 0 Then
        MapManagerialLevel = "Director"
    ElseIf InStr(oldValue, "manager") > 0 Or InStr(oldValue, "management") > 0 Then
        MapManagerialLevel = "Manager"
    ElseIf InStr(oldValue, "lead") > 0 Or InStr(oldValue, "supervisor") > 0 Or InStr(oldValue, "senior") > 0 Or _
           InStr(oldValue, "team lead") > 0 Then
        MapManagerialLevel = "Leader"
    ElseIf InStr(oldValue, "professional") > 0 Or InStr(oldValue, "specialist") > 0 Or InStr(oldValue, "analyst") > 0 Or _
           InStr(oldValue, "officer") > 0 Or InStr(oldValue, "associate") > 0 Or InStr(oldValue, "consultant") > 0 Then
        MapManagerialLevel = "Professional"
    ElseIf InStr(oldValue, "support") > 0 Or InStr(oldValue, "assistant") > 0 Or InStr(oldValue, "clerk") > 0 Or _
           InStr(oldValue, "coordinator") > 0 Or InStr(oldValue, "admin") > 0 Then
        MapManagerialLevel = "Support"
    Else
        MapManagerialLevel = "Professional" ' Default
    End If
End Function

Function CleanExtractedText(text As String) As String
    ' Cleans up extracted text
    Dim cleanText As String
    cleanText = Trim(text)
    Do While InStr(cleanText, "  ") > 0
        cleanText = Replace(cleanText, "  ", " ")
    Loop
    cleanText = Replace(cleanText, Chr(13), "")
    cleanText = Replace(cleanText, Chr(10), "")
    cleanText = Replace(cleanText, Chr(7), "")
    cleanText = Replace(cleanText, Chr(11), "")
    cleanText = Replace(cleanText, Chr(12), "")
    cleanText = Replace(cleanText, Chr(0), "")
    CleanExtractedText = cleanText
End Function

Function ExtractText(doc As Document, startMarker As String, endMarker As String) As String
    ' Extracts text between two markers
    Dim startPos As Long
    Dim endPos As Long
    
    With doc.Content.Find
        .Text = startMarker
        .Forward = True
        .MatchWholeWord = False
        .MatchCase = False
        .Execute
        
        If .Found Then
            startPos = .Parent.End
            If endMarker <> "" Then
                With doc.Range(Start:=startPos, End:=doc.Content.End).Find
                    .Text = endMarker
                    .Forward = True
                    .MatchWholeWord = False
                    .MatchCase = False
                    .Execute
                    If .Found Then
                        endPos = .Parent.Start
                    Else
                        endPos = InStr(startPos, doc.Content.Text, vbCr)
                        If endPos = 0 Or endPos < startPos Then endPos = doc.Content.End
                    End If
                End With
            Else
                endPos = InStr(startPos, doc.Content.Text, vbCr)
                If endPos = 0 Or endPos < startPos Then endPos = doc.Content.End
            End If
            If endPos > startPos Then
                ExtractText = Trim(doc.Range(Start:=startPos, End:=endPos).Text)
            Else
                ExtractText = ""
            End If
        Else
            ExtractText = ""
        End If
    End With
End Function

Function ExtractSectionContent(doc As Document, sectionHeader As String, nextSectionHeader As String) As String
    ' Extracts a section including bullet points
    Dim startPos As Long
    Dim endPos As Long
    Dim sectionRange As Range
    
    With doc.Content.Find
        .Text = sectionHeader
        .Forward = True
        .MatchWholeWord = False
        .MatchCase = False
        .Execute
        If .Found Then
            startPos = .Parent.End
            With doc.Range(Start:=startPos, End:=doc.Content.End).Find
                .Text = nextSectionHeader
                .Forward = True
                .MatchWholeWord = False
                .MatchCase = False
                .Execute
                If .Found Then
                    endPos = .Parent.Start
                Else
                    endPos = doc.Content.End
                End If
            End With
            Set sectionRange = doc.Range(Start:=startPos, End:=endPos)
            ExtractSectionContent = Trim(sectionRange.Text)
        Else
            ExtractSectionContent = ""
        End If
    End With
End Function

Sub SetDropdown(doc As Document, controlTag As String, value As String, logFile As String, fileName As String)
    ' Sets a dropdown content control
    Dim cc As ContentControl
    Dim mappedValue As String
    Dim foundControl As Boolean
    
    If controlTag = "Managerial Level" Then
        mappedValue = MapManagerialLevel(value)
        If Not (mappedValue = "VP" Or mappedValue = "Director" Or mappedValue = "Manager" Or _
                mappedValue = "Leader" Or mappedValue = "Professional" Or mappedValue = "Support") Then
            LogMessage logFile, "WARNING: Invalid Managerial Level '" & mappedValue & "' for file: " & fileName & ". Defaulting to Professional."
            mappedValue = "Professional"
        End If
    Else
        mappedValue = "" ' Leave Job Function and Job Family blank
    End If
    
    foundControl = False
    For Each cc In doc.ContentControls
        If (cc.Title = controlTag Or cc.Tag = controlTag) And cc.Type = wdContentControlComboBox Then
            foundControl = True
            If mappedValue <> "" Then
                On Error Resume Next
                cc.Range.Text = mappedValue
                If Err.Number <> 0 Then
                    LogMessage logFile, "ERROR: Failed to set dropdown '" & controlTag & "' to '" & mappedValue & "' in file: " & fileName & " - " & Err.Description
                    Err.Clear
                End If
                On Error GoTo 0
            End If
            Exit For
        End If
    Next cc
    
    If Not foundControl Then
        LogMessage logFile, "WARNING: Dropdown content control '" & controlTag & "' not found in template for file: " & fileName
    End If
End Sub

Sub FillTextField(doc As Document, fieldName As String, value As String, logFile As String, fileName As String)
    ' Fills a plain text content control
    Dim cc As ContentControl
    Dim foundControl As Boolean
    
    foundControl = False
    For Each cc In doc.ContentControls
        If (cc.Title = fieldName Or cc.Tag = fieldName) And cc.Type = wdContentControlText Then
            foundControl = True
            On Error Resume Next
            cc.Range.Text = value
            If Err.Number <> 0 Then
                LogMessage logFile, "ERROR: Failed to set text field '" & fieldName & "' to '" & value & "' in file: " & fileName & " - " & Err.Description
                Err.Clear
            End If
            On Error GoTo 0
            Exit For
        End If
    Next cc
    
    If Not foundControl Then
        LogMessage logFile, "WARNING: Text content control '" & fieldName & "' not found in template for file: " & fileName
    End If
End Sub

Sub FillTableCell(doc As Document, tableIndex As Integer, cellText As String, newValue As String, logFile As String, fileName As String)
    ' Fills a table cell with new value
    Dim tbl As Table
    Dim cell As Cell
    Dim foundCell As Boolean
    
    If doc.Tables.Count < tableIndex Then
        LogMessage logFile, "ERROR: Table " & tableIndex & " not found in template for file: " & fileName
        Exit Sub
    End If
    
    Set tbl = doc.Tables(tableIndex)
    foundCell = False
    
    For Each cell In tbl.Range.Cells
        If InStr(cell.Range.Text, cellText) > 0 Then
            foundCell = True
            On Error Resume Next
            cell.Range.Text = newValue
            If Err.Number <> 0 Then
                LogMessage logFile, "ERROR: Failed to set table cell '" & cellText & "' to '" & newValue & "' in file: " & fileName & " - " & Err.Description
                Err.Clear
            End If
            On Error GoTo 0
            Exit For
        End If
    Next cell
    
    If Not foundCell Then
        LogMessage logFile, "WARNING: Table cell with text '" & cellText & "' not found in table " & tableIndex & " for file: " & fileName
    End If
End Sub

Sub AddSectionContent(doc As Document, sectionHeader As String, content As String, logFile As String, fileName As String)
    ' Adds content to a section after its header
    Dim rng As Range
    
    With doc.Content.Find
        .Text = sectionHeader
        .Forward = True
        .MatchWholeWord = False
        .MatchCase = False
        .Execute
        If .Found Then
            Set rng = .Parent
            rng.Collapse wdCollapseEnd
            rng.InsertParagraphAfter
            rng.Collapse wdCollapseEnd
            rng.Text = content
            FormatBulletPoints rng
        Else
            LogMessage logFile, "WARNING: Section header '" & sectionHeader & "' not found in template for file: " & fileName
        End If
    End With
End Sub

Sub FormatBulletPoints(rng As Range)
    ' Formats text as bullet points
    Dim para As Paragraph
    Dim bulletIndicators As Variant
    Dim i As Long, lineNum As Long
    
    bulletIndicators = Array("•", "-", "o", "*", "→", "▪", "▸", "►")
    lineNum = 0
    
    For Each para In rng.Paragraphs
        lineNum = lineNum + 1
        If lineNum > 1 And Trim(para.Range.Text) <> "" Then
            Dim foundBullet As Boolean
            foundBullet = False
            For i = LBound(bulletIndicators) To UBound(bulletIndicators)
                If Left(Trim(para.Range.Text), 1) = bulletIndicators(i) Then
                    foundBullet = True
                    Exit For
                End If
            Next i
            If foundBullet Or lineNum > 2 Then
                para.Range.ListFormat.ApplyBulletDefault
                For i = LBound(bulletIndicators) To UBound(bulletIndicators)
                    If Left(Trim(para.Range.Text), 1) = bulletIndicators(i) Then
                        para.Range.Text = Trim(Mid(para.Range.Text, 2))
                        Exit For
                    End If
                Next i
            End If
        End If
    Next para
End Sub
