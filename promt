Sub UpdateJobDescriptionDocuments()
    Dim processedFiles As Integer
    Dim errorFiles As Integer

    ' Define paths
    oldFolder = "Enter the full path to the folder containing old job descriptions:"
    newFolder = "Enter the full path to the folder where updated job descriptions should be saved:"
    templatePath = "Enter the full path to your job description template:"
    
    ' For testing (replace with actual paths when ready)
    oldFolder = "x"
    newFolder = "y"
    templatePath = "z"

    ' Add trailing backslash if missing
    If Right(oldFolder, 1) <> "\" Then oldFolder = oldFolder & "\"
    If Right(newFolder, 1) <> "\" Then newFolder = newFolder & "\"
    
    ' Create log file
    Dim logFile As String
    logFile = newFolder & "UpdateLog_" & Format(Now, "yyyymmdd_hhmmss") & ".txt"
    Open logFile For Output As #1
    Print #1, "Job Description Update Log - " & Now
    Print #1, "----------------------------------------"
    Close #1
    
    ' Process files
    processedFiles = 0
    errorFiles = 0
    
    ' Get all .doc and .docx files from the source folder
    Dim fileName As String
    fileName = Dir(oldFolder & "*.doc*")
    
    ' Create Word application objects
    Dim appWord As Object
    Set appWord = CreateObject("Word.Application")
    appWord.Visible = False
    
    ' Process each file
    Do While fileName <> ""
        On Error Resume Next
        ProcessJobDescriptionFile oldFolder & fileName, newFolder & fileName, templatePath, logFile, processedFiles, errorFiles
        If Err.Number <> 0 Then
            LogMessage logFile, "ERROR processing " & fileName & ": " & Err.Description
            errorFiles = errorFiles + 1
            Err.Clear
        End If
        On Error GoTo 0
        
        fileName = Dir
    Loop
    
    ' Close Word
    appWord.Quit
    Set appWord = Nothing
    
    ' Final log message
    LogMessage logFile, "----------------------------------------"
    LogMessage logFile, "Processing complete: " & processedFiles & " files processed, " & errorFiles & " errors"
    
    MsgBox "Processing complete: " & processedFiles & " files processed, " & errorFiles & " errors. See log file for details.", vbInformation
End Sub

Sub ProcessJobDescriptionFile(oldFilePath As String, newFilePath As String, ByVal templatePath As String, logFile As String, ByRef processedFiles As Integer, ByRef errorFiles As Integer)
    ' Process a single job description file
    Dim appWord As Object
    Dim docOld As Object
    Dim docNew As Object
    
    On Error Resume Next
    
    ' Create Word application
    Set appWord = GetObject(, "Word.Application")
    If appWord Is Nothing Then Set appWord = CreateObject("Word.Application")
    appWord.Visible = False
    
    ' Open old document
    Set docOld = appWord.Documents.Open(oldFilePath, ReadOnly:=True)
    If Err.Number <> 0 Then
        LogMessage logFile, "ERROR: Could not open old document " & oldFilePath & ": " & Err.Description
        errorFiles = errorFiles + 1
        Err.Clear
        On Error GoTo 0
        Exit Sub
    End If
    
    ' Open template for new document
    Set docNew = appWord.Documents.Open(templatePath, ReadOnly:=False)
    If Err.Number <> 0 Then
        LogMessage logFile, "ERROR: Could not open template " & templatePath & ": " & Err.Description
        docOld.Close SaveChanges:=False
        errorFiles = errorFiles + 1
        Err.Clear
        On Error GoTo 0
        Exit Sub
    End If
    
    LogMessage logFile, "Processing file: " & oldFilePath
    
    ' Extract content from old document
    ' Table data
    Dim geographicalScope As String
    Dim managerialLevel As String
    Dim directReportsTo As String
    Dim functionalReportsTo As String
    Dim numDirectReports As String
    Dim numFunctionalReports As String
    Dim budgetResponsibility As String
    Dim dateContent As String
    Dim preparedBy As String
    Dim approvedBy As String
    Dim jobCode As String
    Dim jobFunction As String
    Dim jobFamily As String
    Dim jobTitle As String
    
    ' Extract table data using regular patterns
    geographicalScope = ExtractFieldValue(docOld, "Geographical Scope:")
    managerialLevel = ExtractFieldValue(docOld, "Managerial Level:")
    directReportsTo = ExtractFieldValue(docOld, "Directly reports to:")
    functionalReportsTo = ExtractFieldValue(docOld, "Functionally reports to:")
    numDirectReports = ExtractFieldValue(docOld, "Number of direct reports (job function):")
    numFunctionalReports = ExtractFieldValue(docOld, "Number of indirect / functional reports (job functions):")
    budgetResponsibility = ExtractFieldValue(docOld, "Budget responsibility (in Euro) – if applicable:")
    dateContent = ExtractFieldValue(docOld, "Date (Content):")
    preparedBy = ExtractFieldValue(docOld, "Prepared by:")
    approvedBy = ExtractFieldValue(docOld, "Approved by:")
    jobCode = ExtractFieldValue(docOld, "Job Code:")
    jobFunction = ExtractFieldValue(docOld, "Job function:")
    jobFamily = ExtractFieldValue(docOld, "Job family:")
    jobTitle = ExtractFieldValue(docOld, "Job title:")
    
    ' Extract text sections
    Dim functionalObjectives As String
    Dim mainTasks As String
    Dim educationKnowledge As String
    
    functionalObjectives = ExtractSectionContent(docOld, "Functional objectives:", "Main Tasks:")
    mainTasks = ExtractSectionContent(docOld, "Main Tasks:", "Education and professional knowledge:")
    educationKnowledge = ExtractSectionContent(docOld, "Education and professional knowledge:", "[END]")
    
    ' Fill new document
    
    ' Fill table data
    If Len(jobFunction) > 0 Then FillComboBox docNew, "Job function:", jobFunction, logFile, oldFilePath
    If Len(jobFamily) > 0 Then FillComboBox docNew, "Job family:", jobFamily, logFile, oldFilePath
    If Len(jobTitle) > 0 Then FillTextField docNew, "Job title:", jobTitle, logFile, oldFilePath
    
    ' Table cells in the first table
    Dim tableIndex As Integer
    tableIndex = 1 ' First table in the document
    
    If Len(geographicalScope) > 0 Then FillTableCellByLabel docNew, tableIndex, "Geographical Scope:", geographicalScope, logFile, oldFilePath
    If Len(managerialLevel) > 0 Then FillTableCellByLabel docNew, tableIndex, "Managerial Level:", managerialLevel, logFile, oldFilePath
    If Len(directReportsTo) > 0 Then FillTableCellByLabel docNew, tableIndex, "Directly reports to:", directReportsTo, logFile, oldFilePath
    If Len(functionalReportsTo) > 0 Then FillTableCellByLabel docNew, tableIndex, "Functionally reports to:", functionalReportsTo, logFile, oldFilePath
    If Len(numDirectReports) > 0 Then FillTableCellByLabel docNew, tableIndex, "Number of direct reports (job function):", numDirectReports, logFile, oldFilePath
    If Len(numFunctionalReports) > 0 Then FillTableCellByLabel docNew, tableIndex, "Number of indirect / functional reports (job functions):", numFunctionalReports, logFile, oldFilePath
    If Len(budgetResponsibility) > 0 Then FillTableCellByLabel docNew, tableIndex, "Budget responsibility (in Euro) – if applicable:", budgetResponsibility, logFile, oldFilePath
    If Len(dateContent) > 0 Then FillTableCellByLabel docNew, tableIndex, "Date (Content):", dateContent, logFile, oldFilePath
    If Len(preparedBy) > 0 Then FillTableCellByLabel docNew, tableIndex, "Prepared by:", preparedBy, logFile, oldFilePath
    If Len(approvedBy) > 0 Then FillTableCellByLabel docNew, tableIndex, "Approved by:", approvedBy, logFile, oldFilePath
    If Len(jobCode) > 0 Then FillTableCellByLabel docNew, tableIndex, "Job Code:", jobCode, logFile, oldFilePath
    
    ' Add section content with proper formatting
    AddFormattedSectionContent docNew, "Functional objectives:", functionalObjectives, logFile, oldFilePath
    AddFormattedSectionContent docNew, "Main Tasks:", mainTasks, logFile, oldFilePath
    AddFormattedSectionContent docNew, "Education and professional knowledge:", educationKnowledge, logFile, oldFilePath
    
    ' Save new document
    On Error Resume Next
    docNew.SaveAs newFilePath
    If Err.Number <> 0 Then
        LogMessage logFile, "ERROR: Failed to save file " & newFilePath & ": " & Err.Description
        errorFiles = errorFiles + 1
        Err.Clear
    Else
        processedFiles = processedFiles + 1
        LogMessage logFile, "Successfully processed and saved file: " & newFilePath
    End If
    
    ' Close documents
    docOld.Close SaveChanges:=False
    docNew.Close SaveChanges:=False
    
    On Error GoTo 0
End Sub

Function CleanExtractedText(text As String) As String
    ' Cleans up extracted text
    Dim cleanText As String
    cleanText = Trim(text)
    
    ' Replace multiple spaces with a single space
    Do While InStr(cleanText, "  ") > 0
        cleanText = Replace(cleanText, "  ", " ")
    Loop
    
    ' Remove special characters
    cleanText = Replace(cleanText, Chr(13), "") 'CR
    cleanText = Replace(cleanText, Chr(10), "") 'LF
    cleanText = Replace(cleanText, Chr(7), "")
    cleanText = Replace(cleanText, Chr(11), "")
    cleanText = Replace(cleanText, Chr(12), "")
    cleanText = Replace(cleanText, Chr(0), "")
    
    CleanExtractedText = cleanText
End Function

Function ExtractText(doc As Object, startMarker As String, endMarker As String) As String
    ' Extracts text between two markers
    Dim startPos As Long
    Dim endPos As Long
    
    With doc.Content.Find
        .Text = startMarker
        .Forward = True
        .MatchWholeWord = False
        .MatchCase = False
        .Execute
        
        If .Found Then
            startPos = .Parent.End
            If endMarker <> "" Then
                With doc.Range(Start:=startPos, End:=doc.Content.End).Find
                    .Text = endMarker
                    .Forward = True
                    .MatchWholeWord = False
                    .MatchCase = False
                    .Execute
                    If .Found Then
                        endPos = .Parent.Start
                    Else
                        endPos = InStr(startPos, doc.Content.Text, vbCr)
                        If endPos = 0 Or endPos < startPos Then endPos = doc.Content.End
                    End If
                End With
            Else
                endPos = InStr(startPos, doc.Content.Text, vbCr)
                If endPos = 0 Or endPos < startPos Then endPos = doc.Content.End
            End If
            If endPos > startPos Then
                ExtractText = Trim(doc.Range(Start:=startPos, End:=endPos).Text)
            Else
                ExtractText = ""
            End If
        Else
            ExtractText = ""
        End If
    End With
End Function

Function ExtractSectionContent(doc As Object, sectionHeader As String, nextSectionHeader As String) As String
    ' Extracts content of a section
    Dim startPos As Long
    Dim endPos As Long
    Dim sectionRange As Object
    
    With doc.Content.Find
        .Text = sectionHeader
        .Forward = True
        .MatchWholeWord = False
        .MatchCase = False
        .Execute
        If .Found Then
            startPos = .Parent.End
            With doc.Range(Start:=startPos, End:=doc.Content.End).Find
                .Text = nextSectionHeader
                .Forward = True
                .MatchWholeWord = False
                .MatchCase = False
                .Execute
                If .Found Then
                    endPos = .Parent.Start
                Else
                    endPos = doc.Content.End
                End If
            End With
            Set sectionRange = doc.Range(Start:=startPos, End:=endPos)
            ExtractSectionContent = Trim(sectionRange.Text)
        Else
            ExtractSectionContent = ""
        End If
    End With
End Function

Function ExtractFieldValue(doc As Object, fieldName As String) As String
    ' Extracts value after field name (e.g. "Field name: Value")
    Dim searchText As String
    Dim foundText As String
    Dim colonPos As Integer
    
    searchText = fieldName
    foundText = ExtractText(doc, searchText, vbCr)
    
    ' If nothing found, try without colon
    If foundText = "" And Right(searchText, 1) = ":" Then
        searchText = Left(searchText, Len(searchText) - 1)
        foundText = ExtractText(doc, searchText, vbCr)
    End If
    
    ' Extract content after colon
    colonPos = InStr(foundText, ":")
    If colonPos > 0 Then
        ExtractFieldValue = Trim(Mid(foundText, colonPos + 1))
    Else
        ExtractFieldValue = Trim(foundText)
    End If
End Function

Sub LogMessage(logFile As String, message As String)
    ' Logs a message to the log file
    Open logFile For Append As #1
    Print #1, Format(Now, "yyyy-mm-dd hh:mm:ss") & " - " & message
    Close #1
End Sub

Sub FillComboBox(doc As Object, controlLabel As String, value As String, logFile As String, fileName As String)
    ' Fills a combo box by its label
    Dim cc As Object
    Dim foundControl As Boolean
    
    foundControl = False
    
    For Each cc In doc.ContentControls
        If InStr(cc.Title, controlLabel) > 0 Or InStr(cc.Tag, controlLabel) > 0 Then
            foundControl = True
            On Error Resume Next
            cc.Range.Text = value
            If Err.Number <> 0 Then
                LogMessage logFile, "ERROR: Failed to set combo box '" & controlLabel & "' to '" & value & "' in file: " & fileName & " - " & Err.Description
                Err.Clear
            End If
            On Error GoTo 0
            Exit For
        End If
    Next cc
    
    If Not foundControl Then
        LogMessage logFile, "WARNING: Combo box control for '" & controlLabel & "' not found in template for file: " & fileName
    End If
End Sub

Sub FillTextField(doc As Object, fieldName As String, value As String, logFile As String, fileName As String)
    ' Fills a text field by its name
    Dim cc As Object
    Dim foundControl As Boolean
    
    foundControl = False
    
    For Each cc In doc.ContentControls
        If (cc.Title = fieldName Or cc.Tag = fieldName) Then
            foundControl = True
            On Error Resume Next
            cc.Range.Text = value
            If Err.Number <> 0 Then
                LogMessage logFile, "ERROR: Failed to set text field '" & fieldName & "' to '" & value & "' in file: " & fileName & " - " & Err.Description
                Err.Clear
            End If
            On Error GoTo 0
            Exit For
        End If
    Next cc
    
    If Not foundControl Then
        LogMessage logFile, "WARNING: Text field control '" & fieldName & "' not found in template for file: " & fileName
    End If
End Sub

Sub FillTableCellByLabel(doc As Object, tableIndex As Integer, cellLabel As String, newValue As String, logFile As String, fileName As String)
    ' Fills a table cell in the adjacent cell to the right of the cell containing the label
    On Error Resume Next
    
    If doc.Tables.Count < tableIndex Then
        LogMessage logFile, "ERROR: Table " & tableIndex & " not found in template for file: " & fileName
        Exit Sub
    End If
    
    Dim tbl As Object
    Set tbl = doc.Tables(tableIndex)
    
    Dim cell As Object
    Dim row As Object
    Dim foundCell As Boolean
    Dim i As Integer
    
    foundCell = False
    
    ' Search for the cell containing the label
    For Each row In tbl.Rows
        For i = 1 To row.Cells.Count
            If InStr(row.Cells(i).Range.Text, cellLabel) > 0 Then
                ' Found the label cell, now update the value cell
                If i < row.Cells.Count Then
                    ' If the label cell is not the last one in the row, use the next cell
                    row.Cells(i + 1).Range.Text = newValue
                    foundCell = True
                    Exit For
                End If
            End If
        Next i
        If foundCell Then Exit For
    Next row
    
    If Not foundCell Then
        LogMessage logFile, "WARNING: Could not find table cell for '" & cellLabel & "' in file: " & fileName
    End If
    
    On Error GoTo 0
End Sub

Sub AddFormattedSectionContent(doc As Object, sectionHeader As String, content As String, logFile As String, fileName As String)
    ' Adds properly formatted content to a section after its header with bullet points
    Dim rng As Object
    
    ' Find the section header
    With doc.Content.Find
        .Text = sectionHeader
        .Forward = True
        .MatchWholeWord = False
        .MatchCase = False
        .Execute
        
        If .Found Then
            Set rng = .Parent
            rng.Collapse wdCollapseEnd
            
            ' Add spacing after header
            rng.InsertParagraphAfter
            rng.Collapse wdCollapseEnd
            
            ' Split content by lines and add with bullet points
            Dim contentLines As Variant
            contentLines = Split(content, vbCr)
            
            ' If no line breaks, try to split by bullet points
            If UBound(contentLines) = 0 Then
                contentLines = Split(Replace(content, "• ", vbCr & "• "), vbCr)
            End If
            
            ' Process each line
            Dim i As Integer
            For i = 0 To UBound(contentLines)
                Dim lineText As String
                lineText = Trim(contentLines(i))
                
                If Len(lineText) > 0 Then
                    ' Insert paragraph
                    rng.InsertParagraphAfter
                    rng.Collapse wdCollapseEnd
                    
                    ' Check if line already starts with a bullet point indicator
                    If Left(lineText, 1) = "•" Or Left(lineText, 1) = "-" Or Left(lineText, 1) = "*" Then
                        lineText = Trim(Mid(lineText, 2))
                    End If
                    
                    ' Set the text
                    rng.Text = lineText
                    
                    ' Apply bullet formatting
                    rng.ListFormat.ApplyBulletDefault
                    
                    ' Move to the end for next paragraph
                    rng.Collapse wdCollapseEnd
                End If
            Next i
            
            LogMessage logFile, "Added formatted content to section '" & sectionHeader & "' in file: " & fileName
        Else
            LogMessage logFile, "WARNING: Section header '" & sectionHeader & "' not found in template for file: " & fileName
        End If
    End With
End Sub

' Add constants that might be missing
Const wdCollapseEnd = 0
Const wdContentControlText = 0
